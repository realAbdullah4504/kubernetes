AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance with IAM role and user data

Parameters:

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the SSH key pair to use for EC2 instance
    Default: keypair

  AmiIdParam:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: 'ami-id'
  
  VpcIdParam:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: 'vpc-id'

Resources:

  ##########################
  # EC2 server configuration
  ##########################


  EC2S3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
      RoleName: EC2S3FullAccessRole

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2S3FullAccessRole
      InstanceProfileName: EC2InstanceProfile
  
  KubernetesSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Kubernetes cluster nodes
      VpcId: !Ref VpcIdParam
      Tags:
        - Key: Name
          Value: Kubernetes-Security-Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2379
          ToPort: 2380
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10252
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9443
          ToPort: 9443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 179
          toPort: 179
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5473
          toPort: 5473
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT3M
    Properties:
      InstanceType: t3.medium
      ImageId: !Ref AmiIdParam
      Tags:
        - Key: Name
          Value: control-plane-node
      SecurityGroupIds:
        - !Ref KubernetesSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # # Log all output to a file
          # sudo cat /var/log/user-data.log
          # # sudo cat /var/log/user-data.log
          # exec > /var/log/user-data.log 2>&1
          set -x  # Enable script debugging (print each command before executing)

          # Disable swap
          swapoff -a
          sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

          # Load required kernel modules
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF

          sudo modprobe overlay
          sudo modprobe br_netfilter

          # Set sysctl parameters for Kubernetes networking
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF

          sudo sysctl --system

          # Verify kernel modules and sysctl parameters
          lsmod | grep br_netfilter || echo "br_netfilter module not loaded"
          lsmod | grep overlay || echo "overlay module not loaded"
          sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward || echo "Sysctl parameters not set correctly"

          # Install containerd
          curl -LO https://github.com/containerd/containerd/releases/download/v1.7.14/containerd-1.7.14-linux-amd64.tar.gz
          sudo tar Cxzvf /usr/local containerd-1.7.14-linux-amd64.tar.gz
          curl -LO https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
          sudo mkdir -p /usr/local/lib/systemd/system/
          sudo mv containerd.service /usr/local/lib/systemd/system/
          sudo mkdir -p /etc/containerd
          containerd config default | sudo tee /etc/containerd/config.toml
          sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
          sudo systemctl daemon-reload
          sudo systemctl enable --now containerd

          # Verify containerd service is running
          if ! systemctl status containerd; then
            echo "Containerd service failed to start!"
          fi

          # Install runc
          curl -LO https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
          sudo install -m 755 runc.amd64 /usr/local/sbin/runc

          # Install CNI plugins
          curl -LO https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
          sudo mkdir -p /opt/cni/bin
          sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.5.0.tgz

          # Add Kubernetes package repository and install kubelet, kubeadm, kubectl
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gpg
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubelet=1.29.6-1.1 kubeadm=1.29.6-1.1 kubectl=1.29.6-1.1 --allow-downgrades --allow-change-held-packages
          sudo apt-mark hold kubelet kubeadm kubectl

          #configure crictl
          sudo crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock

          # init kubeadm
          sudo kubeadm init --pod-network-cidr=192.168.0.0/16

          mkdir -p $HOME/.kube
          sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

          # Install Calico CNI
          kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml
          curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml -O
          kubectl apply -f custom-resources.yaml

          echo "Initializing Kubernetes namespace..."
          sudo apt install kubectx

          echo "Disabling AppArmor..."
          sudo systemctl stop apparmor && sudo systemctl disable apparmor

          # Add kubectl alias to .bashrc
          echo "alias k='kubectl'" >> /home/ubuntu/.bashrc
          echo "export EDITOR=nano" >> /home/ubuntu/.bashrc

          # Reload .bashrc
          source /home/ubuntu/.bashrc


  EC2InstanceWorker:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: !Ref AmiIdParam
      Tags:
        - Key: Name
          Value: worker-node
      SecurityGroupIds:
        - !Ref KubernetesSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # # Log all output to a file
          # sudo cat /var/log/user-data.log
          # # sudo cat /var/log/user-data.log
          # exec > /var/log/user-data.log 2>&1
          set -x  # Enable script debugging (print each command before executing)

          # Disable swap
          swapoff -a
          sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

          # Load required kernel modules
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF

          sudo modprobe overlay
          sudo modprobe br_netfilter

          # Set sysctl parameters for Kubernetes networking
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF

          sudo sysctl --system

          # Verify kernel modules and sysctl parameters
          lsmod | grep br_netfilter || echo "br_netfilter module not loaded"
          lsmod | grep overlay || echo "overlay module not loaded"
          sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward || echo "Sysctl parameters not set correctly"

          # Install containerd
          curl -LO https://github.com/containerd/containerd/releases/download/v1.7.14/containerd-1.7.14-linux-amd64.tar.gz
          sudo tar Cxzvf /usr/local containerd-1.7.14-linux-amd64.tar.gz
          curl -LO https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
          sudo mkdir -p /usr/local/lib/systemd/system/
          sudo mv containerd.service /usr/local/lib/systemd/system/
          sudo mkdir -p /etc/containerd
          containerd config default | sudo tee /etc/containerd/config.toml
          sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
          sudo systemctl daemon-reload
          sudo systemctl enable --now containerd

          # Verify containerd service is running
          if ! systemctl status containerd; then
            echo "Containerd service failed to start!"
          fi

          # Install runc
          curl -LO https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
          sudo install -m 755 runc.amd64 /usr/local/sbin/runc

          # Add Kubernetes package repository and install kubelet, kubeadm, kubectl
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gpg
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubelet=1.29.6-1.1 kubeadm=1.29.6-1.1 kubectl=1.29.6-1.1 --allow-downgrades --allow-change-held-packages
          sudo apt-mark hold kubelet kubeadm kubectl
          
          echo "Initializing Kubernetes cluster..."
          sudo apt install kubectx

          echo "Disabling AppArmor..."
          sudo systemctl stop apparmor && sudo systemctl disable apparmor

          # Add kubectl alias to .bashrc
          echo "alias k='kubectl'" >> /home/ubuntu/.bashrc
          echo "export EDITOR=nano" >> /home/ubuntu/.bashrc

          # Reload .bashrc
          source /home/ubuntu/.bashrc